/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three"
import { useRef, RefObject } from "react"
import { Sphere, useGLTF } from "@react-three/drei"
import { GLTF } from "three-stdlib"
import {
    BallCollider,
    CapsuleCollider,
    RapierRigidBody,
    RigidBody,
    RoundCuboidCollider,
    useRevoluteJoint,
    useSphericalJoint,
} from "@react-three/rapier"
import { useFrame } from "@react-three/fiber"

type GLTFResult = GLTF & {
    nodes: {
        Torso_and_Helmet_1: THREE.Mesh
        Torso_and_Helmet_2: THREE.Mesh
        Torso_and_Helmet_3: THREE.Mesh
        Torso_and_Helmet_4: THREE.Mesh
        Arm_L_1: THREE.Mesh
        Arm_L_2: THREE.Mesh
        Arm_L_3: THREE.Mesh
        Arm_R_1: THREE.Mesh
        Arm_R_2: THREE.Mesh
        Arm_R_3: THREE.Mesh
        Head: THREE.Mesh
        Leg_L_1: THREE.Mesh
        Leg_L_2: THREE.Mesh
        Leg_R001: THREE.Mesh
        Leg_R001_1: THREE.Mesh
    }
    materials: {
        Glass: THREE.MeshStandardMaterial
        Suit: THREE.MeshStandardMaterial
        Metal: THREE.MeshStandardMaterial
        Rubber: THREE.MeshPhysicalMaterial
    }
}

export function Joshtronaut(props: JSX.IntrinsicElements["group"]) {
    const { nodes, materials } = useGLTF(
        "/joshtronaut_simplified.glb"
    ) as GLTFResult

    const torsoRef = useRef<RapierRigidBody>(null)!
    const leftArmRef = useRef<RapierRigidBody>(null)!
    const rightArmRef = useRef<RapierRigidBody>(null)!
    const leftLegRef = useRef<RapierRigidBody>(null)!
    const rightLegRef = useRef<RapierRigidBody>(null)!

    const vec = new THREE.Vector3()

    useFrame((_, delta) => {
        delta = Math.min(0.1, delta)
        //prettier-ignore
        //@ts-ignore
        torsoRef.current?.applyImpulse(vec.copy(torsoRef.current.translation()).negate().multiplyScalar(600))
    })

    return (
        <group>
            <group {...props} dispose={null}>
                <RigidBody
                    ref={torsoRef}
                    linearDamping={3}
                    angularDamping={0.5}
                    density={10000}
                    colliders={false}
                >
                    <CapsuleCollider args={[0.3, 0.3]} position={[0, 0.1, 0]} />
                    <group position={[0, 0, 0]}>
                        <mesh
                            geometry={nodes.Torso_and_Helmet_1.geometry}
                            material={materials.Glass}
                        />
                        <mesh
                            geometry={nodes.Torso_and_Helmet_2.geometry}
                            material={materials.Suit}
                        />
                        <mesh
                            geometry={nodes.Torso_and_Helmet_3.geometry}
                            material={materials.Metal}
                        />
                        <mesh
                            geometry={nodes.Torso_and_Helmet_4.geometry}
                            material={materials.Rubber}
                        />
                    </group>
                    {/* <Sphere args={[0.3]} position={[0.058, -0.38, 0.015]}>
                        <meshNormalMaterial />
                    </Sphere> */}
                </RigidBody>

                <RigidBody
                    ref={leftArmRef}
                    linearDamping={3}
                    angularDamping={4}
                    density={100}
                    colliders="hull"
                >
                    <group position={[0.284, 0.052, -0.029]}>
                        <mesh
                            geometry={nodes.Arm_L_1.geometry}
                            material={materials.Suit}
                        />
                        <mesh
                            geometry={nodes.Arm_L_2.geometry}
                            material={materials.Metal}
                        />
                        <mesh
                            geometry={nodes.Arm_L_3.geometry}
                            material={materials.Rubber}
                        />
                    </group>
                </RigidBody>

                <RigidBody
                    ref={rightArmRef}
                    linearDamping={3}
                    angularDamping={4}
                    density={100}
                    colliders="hull"
                >
                    <group position={[-0.286, 0.052, -0.03]}>
                        <mesh
                            geometry={nodes.Arm_R_1.geometry}
                            material={materials.Suit}
                        />
                        <mesh
                            geometry={nodes.Arm_R_2.geometry}
                            material={materials.Metal}
                        />
                        <mesh
                            geometry={nodes.Arm_R_3.geometry}
                            material={materials.Rubber}
                        />
                    </group>
                </RigidBody>
                {/* <mesh
                    geometry={nodes.Head.geometry}
                    material={nodes.Head.material}
                    position={[0, 0.557, 0.138]}
                    rotation={[0.334, 0, 0]}
                    scale={[0.8, 1.118, 0.784]}
                /> */}
                <RigidBody
                    ref={leftLegRef}
                    linearDamping={3}
                    angularDamping={4}
                    density={100}
                    colliders={"hull"}
                >
                    <group position={[0.208, -0.45, 0.015]}>
                        <mesh
                            geometry={nodes.Leg_L_1.geometry}
                            material={materials.Suit}
                        />
                        <mesh
                            geometry={nodes.Leg_L_2.geometry}
                            material={materials.Rubber}
                        />
                    </group>
                </RigidBody>
                <RigidBody
                    ref={rightLegRef}
                    linearDamping={3}
                    angularDamping={4}
                    density={100}
                    colliders={"hull"}
                >
                    <group position={[0.208, -0.45, 0.015]}>
                        <mesh
                            geometry={nodes.Leg_R001.geometry}
                            material={materials.Suit}
                        />
                        <mesh
                            geometry={nodes.Leg_R001_1.geometry}
                            material={materials.Rubber}
                        />
                    </group>
                </RigidBody>
            </group>
            <group>
                <Joint
                    a={torsoRef}
                    b={leftArmRef}
                    args={[
                        [0.204, 0.052, -0.029],
                        [0.18, 0, 0],
                        [0, 0, 1],
                    ]}
                />
                <Joint
                    a={torsoRef}
                    b={rightArmRef}
                    args={[
                        [-0.204, 0.052, -0.029],
                        [-0.18, 0, 0],
                        [0, 0, 1],
                    ]}
                />
                <Joint
                    a={torsoRef}
                    b={leftLegRef}
                    args={[
                        [0.058, -0.45, 0.015],
                        [0, -0.35, 0],
                        [1, 0, 0],
                    ]}
                />
                <Joint
                    a={torsoRef}
                    b={rightLegRef}
                    args={[
                        [-0.058, -0.45, 0.015],
                        [-0.07, -0.35, 0],
                        [1, 0, 0],
                    ]}
                />
            </group>
        </group>
    )
}

interface JointProps {
    a: RefObject<RapierRigidBody>
    b: RefObject<RapierRigidBody>
    args: [
        [number, number, number],
        [number, number, number],
        [number, number, number]
    ]
}

const Joint = ({ a, b, args }: JointProps) => {
    useRevoluteJoint(a, b, args)

    // useFrame(() => {
    //     if (joint.current) {
    //       joint.current.;
    //     }
    //   }, []);

    return null
}

useGLTF.preload("/joshtronaut_simplified.glb")
